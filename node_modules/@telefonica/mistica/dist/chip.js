"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return rt;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _classnames = /*#__PURE__*/ _interop_require_default(require("classnames"));
const _hooks = require("./hooks.js");
const _badge = /*#__PURE__*/ _interop_require_default(require("./badge.js"));
const _box = /*#__PURE__*/ _interop_require_default(require("./box.js"));
const _text = require("./text.js");
const _iconcloseregular = /*#__PURE__*/ _interop_require_default(require("./generated/mistica-icons/icon-close-regular.js"));
const _css = require("./utils/css.js");
const _chipcssmistica = require("./chip.css-mistica.js");
const _skincontractcssmistica = require("./skins/skin-contract.css-mistica.js");
const _themevariantcontext = require("./theme-variant-context.js");
const _touchable = /*#__PURE__*/ _interop_require_wildcard(require("./touchable.js"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const H = (e)=>{
    const { Icon: n, children: A, id: R, dataAttributes: T, active: a, badge: r, onClose: s } = e, { texts: k, isDarkMode: I, textPresets: B } = (0, _hooks.useTheme)(), u = (0, _themevariantcontext.useThemeVariant)() === "alternative", f = n ? {
        mobile: 16,
        desktop: 8
    } : {
        mobile: 20,
        desktop: 12
    }, w = {
        mobile: 20,
        desktop: 12
    }, g = {
        mobile: 16,
        desktop: 8
    }, b = /* @__PURE__ */ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            n && /* @__PURE__ */ (0, _jsxruntime.jsx)(_box.default, {
                paddingRight: 4,
                className: a ? _chipcssmistica.iconActive : _chipcssmistica.icon,
                children: /* @__PURE__ */ (0, _jsxruntime.jsx)(n, {
                    color: "currentColor",
                    size: (0, _css.pxToRem)(16)
                })
            }),
            /* @__PURE__ */ (0, _jsxruntime.jsx)(_box.default, {
                paddingRight: r ? 8 : s ? 4 : 0,
                children: /* @__PURE__ */ (0, _jsxruntime.jsx)(_text.Text2, {
                    id: R,
                    weight: B.indicator.weight,
                    truncate: 1,
                    color: "currentColor",
                    children: A
                })
            })
        ]
    }), c = _object_spread({
        "component-name": "Chip"
    }, T);
    if (s) return /* @__PURE__ */ (0, _jsxruntime.jsxs)(_box.default, {
        className: (0, _classnames.default)(u ? _chipcssmistica.chipVariants.overAlternative : _chipcssmistica.chipVariants.default, _chipcssmistica.chipWrapper),
        paddingLeft: f,
        paddingRight: g,
        dataAttributes: c,
        children: [
            b,
            /* @__PURE__ */ (0, _jsxruntime.jsx)(_touchable.default, {
                style: {
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                    width: (0, _css.pxToRem)(24),
                    height: (0, _css.pxToRem)(24)
                },
                "aria-label": k.closeButtonLabel,
                onPress: ()=>s(),
                children: /* @__PURE__ */ (0, _jsxruntime.jsx)(_iconcloseregular.default, {
                    size: (0, _css.pxToRem)(16),
                    color: _skincontractcssmistica.vars.colors.neutralMedium
                })
            })
        ]
    });
    const l = e.href || e.onPress || e.to, y = a !== void 0 || l, N = ()=>r ? /* @__PURE__ */ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
            children: r === !0 ? /* @__PURE__ */ (0, _jsxruntime.jsx)(_badge.default, {}) : /* @__PURE__ */ (0, _jsxruntime.jsx)(_badge.default, {
                value: r
            })
        }) : null, v = (j)=>/* @__PURE__ */ (0, _jsxruntime.jsxs)(_box.default, {
            className: (0, _classnames.default)(_chipcssmistica.chipVariants[a ? "active" : u ? "overAlternative" : "default"], l ? _chipcssmistica.wrappedContent : _chipcssmistica.chipWrapper, {
                [_chipcssmistica.chipInteractiveVariants[I ? "dark" : "light"]]: y
            }),
            paddingLeft: f,
            paddingRight: r ? g : w,
            dataAttributes: j,
            children: [
                b,
                N()
            ]
        });
    return l ? /* @__PURE__ */ (0, _jsxruntime.jsx)(_touchable.BaseTouchable, _object_spread_props(_object_spread({}, e), {
        className: (0, _classnames.default)(_chipcssmistica.chipWrapper, _chipcssmistica.button),
        dataAttributes: c,
        children: v()
    })) : v(c);
}, rt = H;
