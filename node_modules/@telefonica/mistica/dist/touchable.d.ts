import * as React from 'react';
import type { ExclusifyUnion } from './utils/utility-types';
import type { DataAttributes, TrackingEvent } from './utils/types';
import type { Location } from 'history';
export type PressHandler = (event: React.MouseEvent<HTMLElement>) => void | undefined | Promise<void>;
interface CommonProps {
    children: React.ReactNode;
    className?: string;
    disabled?: boolean;
    style?: React.CSSProperties;
    trackingEvent?: TrackingEvent | ReadonlyArray<TrackingEvent>;
    'aria-label'?: string;
    /** "data-" prefix is automatically added. For example, use "testid" instead of "data-testid" */
    dataAttributes?: DataAttributes;
    'aria-checked'?: 'true' | 'false' | boolean;
    'aria-controls'?: string;
    'aria-expanded'?: 'true' | 'false' | boolean;
    'aria-haspopup'?: 'true' | 'false' | 'menu' | 'dialog' | boolean;
    'aria-hidden'?: 'true' | 'false' | boolean;
    'aria-selected'?: 'true' | 'false' | boolean;
    'aria-labelledby'?: string;
    'aria-live'?: 'polite' | 'off' | 'assertive';
    /** IMPORTANT: try to avoid using role="link" with onPress and first consider other alternatives like to/href + onNavigate */
    role?: string;
    type?: 'button' | 'submit';
    tabIndex?: number;
    as?: 'a';
    stopPropagation?: boolean;
}
type OnPressProps = {
    onPress: PressHandler;
};
type HrefProps = {
    href: string;
    newTab?: boolean;
    loadOnTop?: boolean;
    onNavigate?: () => void | Promise<void>;
};
type ToProps = {
    to: string | Location;
    newTab?: boolean;
    /** @deprecated set the newTab */
    fullPageOnWebView?: boolean;
    replace?: boolean;
    onNavigate?: () => void | Promise<void>;
};
type SubmitProps = {
    type: 'submit';
    formId?: string;
    onPress?: PressHandler;
};
export type AlwaysTouchableComponentProps = ExclusifyUnion<OnPressProps | HrefProps | ToProps> & Pick<CommonProps, 'trackingEvent' | 'dataAttributes' | 'role' | 'aria-label'>;
export type TouchableComponentProps<Props> = ExclusifyUnion<Props | (OnPressProps & Props) | (HrefProps & Props) | (ToProps & Props)> & Pick<CommonProps, 'trackingEvent' | 'dataAttributes' | 'role' | 'aria-label'>;
type Maybe<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K> & {
    maybe: true;
};
export type TouchableProps = ExclusifyUnion<OnPressProps | HrefProps | ToProps | Maybe<OnPressProps, 'onPress'> | Maybe<HrefProps, 'href'> | Maybe<ToProps, 'to'> | SubmitProps> & CommonProps;
export type TouchableElement = HTMLDivElement | HTMLAnchorElement | HTMLButtonElement;
declare const Touchable: React.ForwardRefExoticComponent<TouchableProps & React.RefAttributes<TouchableElement>>;
export declare const BaseTouchable: React.ForwardRefExoticComponent<(TouchableProps & {
    resetMargin?: boolean | undefined;
}) & React.RefAttributes<TouchableElement>>;
export default Touchable;
