"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    BrandLoadingScreen: function() {
        return he;
    },
    LoadingScreen: function() {
        return pe;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _overscrollcolorcontext = require("./overscroll-color-context.js");
const _themevariantcontext = require("./theme-variant-context.js");
const _skincontractcssmistica = require("./skins/skin-contract.css-mistica.js");
const _responsivelayout = /*#__PURE__*/ _interop_require_default(require("./responsive-layout.js"));
const _text = require("./text.js");
const _stack = /*#__PURE__*/ _interop_require_default(require("./stack.js"));
const _loadingscreencssmistica = require("./loading-screen.css-mistica.js");
const _spinner = /*#__PURE__*/ _interop_require_default(require("./spinner.js"));
const _classnames = /*#__PURE__*/ _interop_require_default(require("classnames"));
const _sprinklescssmistica = require("./sprinkles.css-mistica.js");
const _logo = require("./logo.js");
const _screenreaderonly = /*#__PURE__*/ _interop_require_default(require("./screen-reader-only.js"));
const _hooks = require("./hooks.js");
const _constants = require("./skins/constants.js");
const _dom = require("./utils/dom.js");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const L = (param)=>{
    let { isInverse: e } = param;
    const r = `body {background:${e ? _skincontractcssmistica.vars.colors.backgroundBrand : _skincontractcssmistica.vars.colors.background}}`;
    return /* @__PURE__ */ (0, _jsxruntime.jsx)("style", {
        children: r
    });
}, Q = (param)=>{
    let { animateText: e, isLoading: r, onClose: t, texts: i } = param;
    const [c, s] = _react.useState(0), [a, l] = _react.useState(!1), u = _react.useCallback(()=>{
        s((c + 1) % i.length), l(!1);
    }, [
        c,
        i.length
    ]);
    _react.useEffect(()=>{
        if (!r || i.length === 1) return;
        var _i_c_duration;
        const h = setTimeout(()=>{
            e ? l(!0) : u();
        }, (_i_c_duration = i[c].duration) !== null && _i_c_duration !== void 0 ? _i_c_duration : 5e3);
        return ()=>{
            clearTimeout(h);
        };
    }, [
        e,
        c,
        a,
        r,
        u,
        i
    ]);
    const m = ()=>{
        if (!r) {
            t == null || t();
            return;
        }
        a && u();
    }, { title: d, description: p } = i[c % i.length];
    return /* @__PURE__ */ (0, _jsxruntime.jsx)(_responsivelayout.default, {
        children: /* @__PURE__ */ (0, _jsxruntime.jsx)("div", {
            className: (0, _classnames.default)(_loadingscreencssmistica.loadingScreenText, {
                [_loadingscreencssmistica.loadingScreenTextAnimatedOut]: e && (!r || a)
            }),
            onTransitionEnd: m,
            children: /* @__PURE__ */ (0, _jsxruntime.jsxs)(_stack.default, {
                space: 8,
                children: [
                    d && /* @__PURE__ */ (0, _jsxruntime.jsx)("div", {
                        className: e ? _loadingscreencssmistica.loadingScreenTextAnimated : void 0,
                        children: /* @__PURE__ */ (0, _jsxruntime.jsx)(_text.Text4, {
                            textAlign: "center",
                            regular: !0,
                            as: "h1",
                            children: d
                        })
                    }),
                    p && /* @__PURE__ */ (0, _jsxruntime.jsx)("div", {
                        className: e ? _loadingscreencssmistica.loadingScreenTextAnimated : void 0,
                        style: {
                            animationDelay: "200ms"
                        },
                        children: /* @__PURE__ */ (0, _jsxruntime.jsx)(_text.Text2, {
                            textAlign: "center",
                            regular: !0,
                            as: "p",
                            color: _skincontractcssmistica.vars.colors.textSecondary,
                            children: p
                        })
                    })
                ]
            })
        }, c)
    });
}, x = /*#__PURE__*/ _react.forwardRef((param, d)=>{
    let { isInverse: e, children: r, isLoading: t = !0, animateText: i, animateBackground: c, onClose: s, dataAttributes: a, title: l, description: u, texts: m = [
        {
            title: l,
            description: u
        }
    ] } = param;
    const [p, h] = _react.useState(!1);
    _react.useEffect(()=>{
        if (!t) return;
        const A = setTimeout(()=>{
            h(!0);
        }, _loadingscreencssmistica.inOutAnimationMs);
        return ()=>{
            clearTimeout(A);
        };
    }, [
        t
    ]);
    const v = _react.useRef(!1), g = _react.useCallback(()=>{
        !t && !v.current && (v.current = !0, s == null || s());
    }, [
        t,
        s
    ]);
    _react.useEffect(()=>{
        if (t) return;
        if (!i && !c) {
            s == null || s();
            return;
        }
        const A = setTimeout(()=>{
            g();
        }, _loadingscreencssmistica.inOutAnimationMs);
        return ()=>{
            clearTimeout(A);
        };
    }, [
        c,
        i,
        g,
        t,
        s
    ]);
    const b = !r;
    return (0, _overscrollcolorcontext.useSetOverscrollColor)(e ? {
        topColor: _skincontractcssmistica.vars.colors.backgroundBrandTop
    } : {}), /* @__PURE__ */ (0, _jsxruntime.jsxs)(_themevariantcontext.ThemeVariant, {
        isInverse: e,
        children: [
            /* @__PURE__ */ (0, _jsxruntime.jsxs)("div", _object_spread_props(_object_spread({
                ref: d
            }, (0, _dom.getPrefixedDataAttributes)(a)), {
                className: (0, _classnames.default)(_loadingscreencssmistica.loadingScreen, _loadingscreencssmistica.screenBackground[e ? "inverse" : "default"], {
                    [_loadingscreencssmistica.screenBackgroundFadeOut]: !t && c,
                    [_loadingscreencssmistica.screenBackgroundAnimated]: c
                }, (0, _sprinklescssmistica.sprinkles)({
                    justifyContent: b ? "center" : "space-between"
                })),
                onAnimationEnd: ()=>{
                    h(!0);
                },
                onTransitionEnd: g,
                children: [
                    r ? /* @__PURE__ */ (0, _jsxruntime.jsx)("div", {
                        className: _loadingscreencssmistica.loadingScreenChildren,
                        children: r
                    }) : /* @__PURE__ */ (0, _jsxruntime.jsx)(_spinner.default, {
                        delay: "0s",
                        size: 32,
                        color: e ? _skincontractcssmistica.vars.colors.inverse : void 0
                    }),
                    /* @__PURE__ */ (0, _jsxruntime.jsx)(Q, {
                        animateText: i,
                        isLoading: t,
                        texts: m,
                        onClose: g
                    }),
                    !b && /* @__PURE__ */ (0, _jsxruntime.jsx)("div", {
                        style: {
                            height: 104
                        }
                    })
                ]
            })),
            t && p && /* @__PURE__ */ (0, _jsxruntime.jsx)(L, {
                isInverse: !!e
            })
        ]
    });
}), pe = /*#__PURE__*/ _react.forwardRef((e, r)=>/* @__PURE__ */ (0, _jsxruntime.jsx)(x, _object_spread_props(_object_spread({
        ref: r
    }, e), {
        dataAttributes: _object_spread({
            "component-name": "LoadingScreen"
        }, e.dataAttributes),
        animateBackground: !0
    }))), U = (param)=>{
    let { isLoading: e, onCloseStart: r, onCloseEnd: t } = param;
    const { texts: i } = (0, _hooks.useTheme)(), [c, s] = _react.useState(!0), a = ()=>{
        e || (r == null || r(), s(!1), t == null || t());
    };
    return /* @__PURE__ */ (0, _jsxruntime.jsxs)("div", {
        className: (0, _classnames.default)(_loadingscreencssmistica.logo, {
            [_loadingscreencssmistica.pulseLogo]: c
        }),
        onAnimationIteration: a,
        children: [
            /* @__PURE__ */ (0, _jsxruntime.jsx)(_screenreaderonly.default, {
                children: /* @__PURE__ */ (0, _jsxruntime.jsx)("div", {
                    children: i.loading
                })
            }),
            /* @__PURE__ */ (0, _jsxruntime.jsx)(_logo.Logo, {
                size: 128
            })
        ]
    });
}, X = /*#__PURE__*/ _react.lazy(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("./vivinho-loading-animation/index.js")))), Y = (param)=>{
    let { isLoading: e, onCloseStart: r, onCloseEnd: t } = param;
    const { skinName: i } = (0, _hooks.useTheme)();
    return i === _constants.VIVO_NEW_SKIN ? /* @__PURE__ */ (0, _jsxruntime.jsx)(_react.Suspense, {
        fallback: null,
        children: /* @__PURE__ */ (0, _jsxruntime.jsx)(X, {
            isLoading: e,
            onCloseStart: r,
            onCloseEnd: t
        })
    }) : /* @__PURE__ */ (0, _jsxruntime.jsx)(U, {
        isLoading: e,
        onCloseStart: r,
        onCloseEnd: t
    });
}, he = /*#__PURE__*/ _react.forwardRef((_param, c)=>{
    var { isLoading: e = !0, onClose: r, dataAttributes: t } = _param, i = _object_without_properties(_param, [
        "isLoading",
        "onClose",
        "dataAttributes"
    ]);
    const [s, a] = _react.useState(!1), l = _react.useRef(!1), u = _react.useRef(!1), m = ()=>{
        a(!0);
    }, d = ()=>{
        l.current && u.current && (r == null || r());
    };
    return /* @__PURE__ */ (0, _jsxruntime.jsx)(x, _object_spread_props(_object_spread({
        ref: c,
        isInverse: !0
    }, i), {
        isLoading: e || !s,
        onClose: ()=>{
            u.current = !0, d();
        },
        animateText: !0,
        dataAttributes: _object_spread({
            "component-name": "BrandLoadingScreen"
        }, t),
        children: /* @__PURE__ */ (0, _jsxruntime.jsx)(Y, {
            isLoading: e,
            onCloseStart: m,
            onCloseEnd: ()=>{
                l.current = !0, d();
            }
        })
    }));
});
