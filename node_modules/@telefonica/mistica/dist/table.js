"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Table", {
    enumerable: true,
    get: function() {
        return Oe;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _dom = require("./utils/dom.js");
const _tablecssmistica = require("./table.css-mistica.js");
const _skincontractcssmistica = require("./skins/skin-contract.css-mistica.js");
const _text = /*#__PURE__*/ _interop_require_wildcard(require("./text.js"));
const _boxed = require("./boxed.js");
const _classnames = /*#__PURE__*/ _interop_require_default(require("classnames"));
const _box = /*#__PURE__*/ _interop_require_default(require("./box.js"));
const _css = require("./utils/css.js");
const _inline = /*#__PURE__*/ _interop_require_default(require("./inline.js"));
const _iconbutton = require("./icon-button.js");
const _iconbuttoncssmistica = require("./icon-button.css-mistica.js");
const _tableactionsheader = require("./table-actions-header.js");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const P = {
    default: "8px",
    boxed: "16px"
}, Z = "1px", ke = (a)=>a.Icon ? /* @__PURE__ */ (0, _jsxruntime.jsx)(_iconbutton.IconButton, _object_spread_props(_object_spread({}, a), {
        "aria-label": a.label,
        small: !0,
        type: "neutral",
        backgroundType: "transparent",
        bleedY: !0
    })) : /* @__PURE__ */ (0, _jsxruntime.jsx)(_iconbutton.ToggleIconButton, _object_spread_props(_object_spread({}, a), {
        checkedProps: _object_spread_props(_object_spread({}, a.checkedProps), {
            "aria-label": a.checkedProps.label,
            type: "brand",
            backgroundType: "solid"
        }),
        uncheckedProps: _object_spread_props(_object_spread({}, a.uncheckedProps), {
            "aria-label": a.uncheckedProps.label,
            type: "neutral",
            backgroundType: "transparent"
        }),
        small: !0,
        bleedY: !0
    })), q = "left", Oe = /*#__PURE__*/ _react.forwardRef((_param, $)=>{
    var { dataAttributes: a, heading: m = [], content: k = [], boxed: b, responsive: J, fullWidth: u = !0, maxHeight: v, emptyCase: A, columnTextAlign: T = q, rowVerticalAlign: C = "middle", columnWidth: p, hideHeaders: g, scrollOverResponsiveLayout: K, rowHeaderIndex: s } = _param, S = _object_without_properties(_param, [
        "dataAttributes",
        "heading",
        "content",
        "boxed",
        "responsive",
        "fullWidth",
        "maxHeight",
        "emptyCase",
        "columnTextAlign",
        "rowVerticalAlign",
        "columnWidth",
        "hideHeaders",
        "scrollOverResponsiveLayout",
        "rowHeaderIndex"
    ]);
    const z = (l)=>{
        var _T_l;
        return Array.isArray(T) ? (_T_l = T[l]) !== null && _T_l !== void 0 ? _T_l : q : T;
    }, r = J === "collapse-rows", B = g === !0 || g === "mobile", Q = g === !0 || g === "desktop", y = k.some((l)=>!Array.isArray(l) && l.actions.length > 0), D = /* @__PURE__ */ (0, _jsxruntime.jsxs)("table", {
        className: (0, _classnames.default)(_tablecssmistica.table, {
            [_tablecssmistica.boxed]: b,
            [_tablecssmistica.collapsedRowsInMobile]: r,
            [_tablecssmistica.fullWidth]: u,
            [_tablecssmistica.hiddenHeadersInDesktop]: Q,
            [_tablecssmistica.hiddenHeadersInMobile]: B || r
        }),
        "aria-label": S["aria-label"],
        "aria-labelledby": S["aria-labelledby"],
        "aria-describedby": S["aria-describedby"],
        children: [
            m.length > 0 && /* @__PURE__ */ (0, _jsxruntime.jsx)("thead", {
                children: /* @__PURE__ */ (0, _jsxruntime.jsxs)(_text.Text1, {
                    as: "tr",
                    medium: !0,
                    transform: "uppercase",
                    color: _skincontractcssmistica.vars.colors.textSecondary,
                    wordBreak: !1,
                    children: [
                        m.map((l, o)=>/* @__PURE__ */ (0, _jsxruntime.jsx)("th", {
                                scope: "col",
                                className: (0, _classnames.default)(_tablecssmistica.cellTextAlign[z(o)], _tablecssmistica.verticalAlign[C], {
                                    [_tablecssmistica.rowFirstItem]: o === 0,
                                    [_tablecssmistica.rowLastItem]: o === m.length - 1 && !y
                                }),
                                style: {
                                    minWidth: p == null ? void 0 : p[o],
                                    width: p == null ? void 0 : p[o]
                                },
                                children: l
                            }, o)),
                        y && /* @__PURE__ */ (0, _jsxruntime.jsx)(_tableactionsheader.TableActionsHeader, {})
                    ]
                })
            }),
            /* @__PURE__ */ (0, _jsxruntime.jsx)("tbody", {
                children: k.length > 0 ? k.map((l, o)=>{
                    var _l_actions;
                    const n = Array.isArray(l) ? l : l.cells, i = Array.isArray(l) ? [] : (_l_actions = l.actions) !== null && _l_actions !== void 0 ? _l_actions : [], w = /* @__PURE__ */ (0, _jsxruntime.jsx)(_inline.default, {
                        space: 16,
                        children: i.map((d, t)=>"Icon" in d || "checkedProps" in d ? /* @__PURE__ */ (0, _jsxruntime.jsx)(ke, _object_spread({}, d), t) : /* @__PURE__ */ (0, _jsxruntime.jsx)(_react.Fragment, {
                                children: d
                            }, t))
                    }), I = i.length ? `calc(${_iconbuttoncssmistica.iconContainerSize.small} * ${i.length} + 16px * ${i.length - 1})` : "0px";
                    return /* @__PURE__ */ (0, _jsxruntime.jsxs)("tr", {
                        style: {
                            position: "relative"
                        },
                        children: [
                            n.map((d, t)=>{
                                const U = s === n.length - 1 ? t === n.length - 2 || n.length === 1 : t === n.length - 1;
                                return /* @__PURE__ */ (0, _jsxruntime.jsxs)(t === s ? "th" : "td", {
                                    className: (0, _classnames.default)(_tablecssmistica.verticalAlign[C], {
                                        [_tablecssmistica.rowFirstItem]: t === 0,
                                        [_tablecssmistica.rowLastItem]: t === n.length - 1 && !y,
                                        [_tablecssmistica.rowLastCollapsedItem]: U && r,
                                        [_tablecssmistica.collapsedRowHeaderItem]: t === s && r
                                    }),
                                    style: {
                                        // add space between top actions and content
                                        marginRight: r && i.length ? `calc(${I} + 8px)` : void 0
                                    },
                                    scope: t === s ? "row" : void 0,
                                    children: [
                                        t !== s && r && m[t] && !B && // this is aria-hidden because screen readers already read the column heading from the th
                                        /* @__PURE__ */ (0, _jsxruntime.jsx)("div", {
                                            className: _tablecssmistica.mobileCellHeading,
                                            "aria-hidden": !0,
                                            children: /* @__PURE__ */ (0, _jsxruntime.jsx)(_text.Text1, {
                                                medium: !0,
                                                color: _skincontractcssmistica.vars.colors.textSecondary,
                                                children: m[t]
                                            })
                                        }),
                                        /* @__PURE__ */ (0, _jsxruntime.jsx)(_text.default, _object_spread_props(_object_spread({
                                            desktopSize: _text.textProps.text2.desktopSize,
                                            desktopLineHeight: _text.textProps.text2.desktopLineHeight
                                        }, t === s && r ? {
                                            mobileSize: _text.textProps.text4.mobileSize,
                                            mobileLineHeight: _text.textProps.text4.mobileLineHeight
                                        } : {
                                            mobileSize: _text.textProps.text2.mobileSize,
                                            mobileLineHeight: _text.textProps.text2.mobileLineHeight
                                        }), {
                                            as: "div",
                                            wordBreak: !1,
                                            children: /* @__PURE__ */ (0, _jsxruntime.jsx)("div", {
                                                className: (0, _classnames.default)(_tablecssmistica.cellTextAlign[z(t)], {
                                                    [_tablecssmistica.collapsedRowTitle]: t === s && r
                                                }),
                                                children: d
                                            })
                                        }))
                                    ]
                                }, t);
                            }),
                            i.length > 0 ? /* @__PURE__ */ (0, _jsxruntime.jsx)("td", {
                                className: (0, _classnames.default)(_tablecssmistica.verticalAlign[C], _tablecssmistica.actionsTableCell, _tablecssmistica.rowLastItem, {
                                    [_tablecssmistica.rowFirstItem]: n.length === 0
                                }),
                                align: "right",
                                style: {
                                    width: `calc(${I} + 12px)`
                                },
                                children: w
                            }) : y && /* @__PURE__ */ (0, _jsxruntime.jsx)("td", {
                                className: _tablecssmistica.actionsTableCell
                            }),
                            process.env.NODE_ENV !== "test" && r && i.length > 0 && /* @__PURE__ */ (0, _jsxruntime.jsx)("td", {
                                className: _tablecssmistica.topActions,
                                style: {
                                    position: "absolute",
                                    top: `calc(${b ? P.boxed : P.default} - ${Z} + (${_iconbuttoncssmistica.iconContainerSize.small} - ${_iconbuttoncssmistica.iconSize.small}) / 2)`,
                                    right: b ? `calc(${P.boxed} - ${Z})` : 0,
                                    width: I
                                },
                                children: w
                            })
                        ]
                    }, o);
                }) : /* @__PURE__ */ (0, _jsxruntime.jsx)("tr", {
                    children: /* @__PURE__ */ (0, _jsxruntime.jsx)("td", {
                        colSpan: m.length,
                        className: (0, _classnames.default)({
                            [_tablecssmistica.rowLastCollapsedItem]: r
                        }),
                        children: typeof A == "string" ? /* @__PURE__ */ (0, _jsxruntime.jsx)(_box.default, {
                            paddingY: 56,
                            children: /* @__PURE__ */ (0, _jsxruntime.jsx)(_text.Text2, {
                                regular: !0,
                                textAlign: "center",
                                as: "div",
                                children: A
                            })
                        }) : A
                    })
                })
            })
        ]
    }), O = function() {
        let l = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
        return {
            className: (0, _classnames.default)(_tablecssmistica.scrollContainer, {
                [_tablecssmistica.scrollOverResponsiveLayout]: l,
                [_tablecssmistica.collapsedRowsInMobile]: r,
                [_tablecssmistica.fullWidth]: u
            }),
            style: (0, _css.applyCssVars)({
                [_tablecssmistica.vars.maxHeight]: typeof v == "number" ? `${v}px` : v !== null && v !== void 0 ? v : "auto"
            })
        };
    };
    return b ? /* @__PURE__ */ (0, _jsxruntime.jsx)(_boxed.InternalBoxed, {
        desktopOnly: r,
        width: "fit-content",
        maxWidth: "100%",
        minWidth: {
            desktop: u ? "100%" : "auto",
            mobile: r || u ? "100%" : "auto"
        },
        ref: $,
        dataAttributes: _object_spread({
            "component-name": "Table"
        }, a),
        children: /* @__PURE__ */ (0, _jsxruntime.jsx)("div", _object_spread_props(_object_spread({}, O()), {
            children: D
        }))
    }) : /* @__PURE__ */ (0, _jsxruntime.jsx)("div", _object_spread_props(_object_spread({
        ref: $
    }, (0, _dom.getPrefixedDataAttributes)(a, "Table"), O(K)), {
        children: D
    }));
});
