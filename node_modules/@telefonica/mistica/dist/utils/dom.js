"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addPassiveEventListener: function() {
        return h;
    },
    cancelEvent: function() {
        return f;
    },
    createChangeEvent: function() {
        return m;
    },
    getCssVarValue: function() {
        return l;
    },
    getPrefixedDataAttributes: function() {
        return g;
    },
    getScrollDistanceToBottom: function() {
        return b;
    },
    getScrollableParentElement: function() {
        return w;
    },
    hasScroll: function() {
        return P;
    },
    isCssVar: function() {
        return i;
    },
    isInputTypeSupported: function() {
        return d;
    },
    listenResize: function() {
        return y;
    },
    removePassiveEventListener: function() {
        return E;
    }
});
const _environment = require("./environment.js");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const d = (e)=>{
    if ((0, _environment.isServerSide)()) return !1;
    const t = document.createElement("input");
    return t.setAttribute("type", e), t.type === e;
}, f = (e)=>{
    e.stopPropagation(), e.preventDefault();
}, m = (e, t)=>{
    const r = new Event("change");
    return e.value = t, _object_spread_props(_object_spread({}, r), {
        target: e,
        currentTarget: e
    });
};
let c = !1;
try {
    const e = Object.defineProperty({}, "passive", {
        get () {
            c = !0;
        }
    });
    window.addEventListener("test", ()=>{}, e);
} catch (e) {}
const h = (e, t, r)=>e.addEventListener(t, r, c ? {
        passive: !0
    } : !1), E = (e, t, r)=>e.removeEventListener(t, r, !1), g = (e, t)=>{
    const r = t ? {
        "data-component-name": t
    } : {};
    return e && Object.keys(e).forEach((n)=>{
        r["data-" + n] = e[n];
    }), r;
}, u = (e, t)=>{
    const r = `overflow${t}`, n = window.getComputedStyle(e)[r];
    return [
        "auto",
        "scroll",
        "overlay"
    ].includes(n);
}, w = function(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "Y";
    let r = e == null ? void 0 : e.parentElement;
    for(; r && !u(r, t);)r = r.parentElement;
    return r || document.documentElement;
}, b = (e)=>e.scrollHeight - e.scrollTop - e.clientHeight, P = (e)=>e.scrollHeight > e.clientHeight, y = (e, t)=>{
    const r = ()=>(0, _environment.isServerSide)() ? Promise.resolve(null) : window.ResizeObserver ? Promise.resolve(ResizeObserver) : Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require(/* webpackChunkName: "@juggle/resize-observer" */ "@juggle/resize-observer"))).then((o)=>o.ResizeObserver);
    let n = !1, s = null;
    return r().then((o)=>{
        !n && o && (s = new o(t), s.observe(e));
    }), ()=>{
        n = !0, s && s.disconnect();
    };
}, v = (e)=>{
    const [t, r] = e.replace(/^var\(/, "").replace(/\)$/, "").split(/\s*,\s*(.*)/);
    return {
        varName: t,
        fallback: r
    };
}, i = (e)=>e.startsWith("var(") || e.startsWith("--"), l = (e, t)=>{
    if (!i(e)) throw new Error(`Invalid css var: ${e}`);
    if (e.startsWith("var(")) {
        const { varName: r, fallback: n } = v(e), s = l(r, t);
        return !s && n ? i(n) ? l(n, t) : n : s;
    }
    return getComputedStyle(t !== null && t !== void 0 ? t : document.documentElement).getPropertyValue(e);
};
