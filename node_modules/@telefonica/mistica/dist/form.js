"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return K;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _hooks = require("./hooks.js");
const _formcontext = require("./form-context.js");
const _classnames = /*#__PURE__*/ _interop_require_default(require("classnames"));
const _sprinklescssmistica = require("./sprinkles.css-mistica.js");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
process.env.NODE_ENV !== "test" && typeof document < "u" && !("scrollBehavior" in document.documentElement.style) && Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("scroll-behavior-polyfill"))).finally(()=>{});
const W = (param)=>{
    let { children: R, className: S, onSubmit: b, initialValues: k = {}, autoJump: h = !1, onValidationErrors: a, id: x } = param;
    const f = _react.useRef(!0), [i, E] = _react.useState(k), [l, I] = _react.useState(k), [w, m] = _react.useState("filling"), [V, y] = _react.useState({}), c = _react.useRef(/* @__PURE__ */ new Map()), d = _react.useRef(null), { texts: g } = (0, _hooks.useTheme)(), v = (0, _hooks.useAriaId)(x);
    _react.useEffect(()=>(f.current = !0, ()=>{
            f.current = !1;
        }), []);
    const j = _react.useCallback((e, param)=>{
        let { input: r, validator: o, focusableElement: t } = param;
        r || t ? c.current.set(e, {
            input: r,
            validator: o,
            focusableElement: t
        }) : c.current.delete(e);
    }, []), P = _react.useCallback((param)=>{
        let { name: e, error: r } = param;
        return y((o)=>_object_spread_props(_object_spread({}, o), {
                [e]: r
            }));
    }, []), p = _react.useCallback(()=>{
        var o;
        const e = {};
        for (const [t, { input: s, validator: u }] of c.current)if (s) {
            if (s.disabled) continue;
            if (s.required && !((o = l[t]) != null && o.trim())) e[t] = g.formFieldErrorIsMandatory;
            else {
                const F = u == null ? void 0 : u(i[t], l[t]);
                F && (e[t] = F);
            }
        }
        const r = Object.keys(e).map((t)=>{
            const s = c.current.get(t);
            return (s == null ? void 0 : s.focusableElement) || (s == null ? void 0 : s.input);
        }).filter(Boolean);
        if (r.length) {
            r.sort((t, s)=>t.compareDocumentPosition(s) & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1), r[0].focus();
            try {
                r[0].scrollIntoView({
                    behavior: "smooth",
                    block: "center",
                    inline: "center"
                });
            } catch (e) {}
        }
        return y(e), a && Object.keys(e).length > 0 && a(e), e;
    }, [
        a,
        l,
        g,
        i
    ]), T = _react.useCallback((e)=>{
        setTimeout(()=>{
            var r;
            if (h && d.current) {
                const o = Array.from(d.current.querySelectorAll("input, select")), t = (r = c.current.get(e)) == null ? void 0 : r.input, s = o.indexOf(t);
                if (s >= 0) {
                    const u = o[s + 1];
                    u ? u.focus() : t == null || t.blur();
                }
            }
        }, 100);
    }, [
        h
    ]), O = (e)=>[
            ...c.current.keys()
        ].reduce((r, o)=>{
            var t, s;
            return (s = (t = c.current.get(o)) == null ? void 0 : t.input) != null && s.disabled ? r : _object_spread_props(_object_spread({}, r), {
                [o]: e[o]
            });
        }, {}), C = _react.useCallback((e)=>(e == null || e.preventDefault(), m("sending"), Object.keys(p()).length > 0 ? (m("filling"), Promise.resolve()) : Promise.resolve(b(O(i), O(l))).finally(()=>{
            f.current && m("filling");
        })), [
        b,
        l,
        p,
        i
    ]), D = _react.useCallback((param)=>{
        let { name: e, value: r } = param;
        E((o)=>_object_spread_props(_object_spread({}, o), {
                [e]: r
            }));
    }, []), M = _react.useCallback((param)=>{
        let { name: e, value: r } = param;
        I((o)=>_object_spread_props(_object_spread({}, o), {
                [e]: r
            }));
    }, []);
    return /* @__PURE__ */ (0, _jsxruntime.jsx)(_formcontext.FormContext.Provider, {
        value: {
            formStatus: w,
            values: i,
            setValue: D,
            rawValues: l,
            setRawValue: M,
            formErrors: V,
            setFormError: P,
            register: j,
            jumpToNext: T,
            validate: p,
            submit: C,
            formId: v
        },
        children: /* @__PURE__ */ (0, _jsxruntime.jsx)("form", {
            id: v,
            onSubmit: C,
            ref: d,
            className: (0, _classnames.default)((0, _sprinklescssmistica.sprinkles)({
                width: "100%"
            }), S),
            noValidate: !0,
            children: R
        })
    });
}, K = W;
