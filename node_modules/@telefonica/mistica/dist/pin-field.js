"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return de;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _classnames = /*#__PURE__*/ _interop_require_default(require("classnames"));
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _inline = /*#__PURE__*/ _interop_require_default(require("./inline.js"));
const _textfieldbasecssmistica = require("./text-field-base.css-mistica.js");
const _pinfieldcssmistica = require("./pin-field.css-mistica.js");
const _hooks = require("./hooks.js");
const _screenreaderonly = /*#__PURE__*/ _interop_require_default(require("./screen-reader-only.js"));
const _integerfield = require("./integer-field.js");
const _formcontext = require("./form-context.js");
const _dom = require("./utils/dom.js");
const _textfieldcomponents = require("./text-field-components.js");
const _reactdom = require("react-dom");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
let T = !1;
const x = (param)=>{
    let { length: l = 6, hideCode: f = !1, readSms: d, disabled: g, readOnly: y, value: F, defaultValue: b, onChange: u, inputRef: A } = param;
    var _ref;
    const { texts: C } = (0, _hooks.useTheme)(), [R, S] = _react.useState((_ref = b == null ? void 0 : b.slice(0, l)) !== null && _ref !== void 0 ? _ref : ""), [w, I] = _react.useState(void 0), a = _react.useRef(Array.from({
        length: l
    }, ()=>null)).current, i = typeof F < "u", t = i ? F : R, c = _react.useCallback((s)=>{
        if (s === t) return;
        i || S(s);
        const e = a[0];
        e && (u == null || u((0, _dom.createChangeEvent)(_object_spread({}, e), s)));
    }, [
        t,
        a,
        i,
        u
    ]);
    _react.useEffect(()=>{
        c(t.slice(0, l));
    }, [
        l,
        t,
        c
    ]), _react.useEffect(()=>{
        if (d && "OTPCredential" in window && !T) {
            T = !0;
            const s = new AbortController();
            return navigator.credentials.get({
                // @ts-expect-error: otp is not in the types yet
                otp: {
                    transport: [
                        "sms"
                    ]
                },
                signal: s.signal
            }).then((e)=>{
                if (e) {
                    const r = e.code.slice(0, l);
                    c(r);
                }
            }).catch(()=>{}).finally(()=>{
                T = !1;
            }), ()=>{
                T = !1, s.abort();
            };
        }
    }, [
        c,
        l,
        d
    ]);
    const H = (s)=>(e)=>{
            var k;
            const r = e.target.value;
            if (r === "") return;
            const o = t[s];
            let p = r;
            !o || o === r ? p = r : o === r[0] ? p = r.slice(1) : o === r[r.length - 1] && (p = r.slice(0, -1));
            let v = s, P = t;
            if (p.length >= 2) {
                const V = p.slice(0, l - s);
                P = t.slice(0, s) + V, v = Math.min(s + V.length, l - 1);
            } else P = t.slice(0, s) + p + t.slice(s + 1), v = s + 1;
            P !== t && ((0, _reactdom.flushSync)(()=>{
                c(P);
            }), v !== s && v <= l - 1 && ((k = a[v]) == null || k.focus()));
        };
    return /* @__PURE__ */ (0, _jsxruntime.jsx)(_inline.default, {
        space: 8,
        children: Array.from({
            length: l
        }).map((s, e)=>/* @__PURE__ */ {
            var _t_e;
            return (0, _jsxruntime.jsxs)("div", {
                className: y ? _pinfieldcssmistica.readOnlyField : e === w ? _pinfieldcssmistica.focusedField : _pinfieldcssmistica.field,
                children: [
                    /* @__PURE__ */ (0, _jsxruntime.jsx)(_integerfield.IntegerInput, {
                        "aria-label": C.pinFieldInputLabel.replace("1$s", String(e + 1)).replace("2$s", String(l)),
                        type: f ? "password" : "text",
                        tabIndex: e > t.length ? -1 : void 0,
                        required: !0,
                        onFocus: ()=>{
                            var o;
                            const r = t.length === l ? -1 : t.length;
                            r >= 0 && r < e ? (o = a[r]) == null || o.focus() : I(e);
                        },
                        onBlur: ()=>{
                            I(void 0);
                        },
                        inputRef: (r)=>{
                            a[e] = r, e === 0 && A(r);
                        },
                        className: (0, _classnames.default)(_textfieldbasecssmistica.input, _pinfieldcssmistica.input, {
                            [_pinfieldcssmistica.passwordInput]: f
                        }),
                        style: {
                            marginTop: `calc(${_pinfieldcssmistica.pinInputLineHeight} - 1px)`,
                            marginBottom: `calc(${_pinfieldcssmistica.pinInputLineHeight} - 1px)`,
                            lineHeight: _pinfieldcssmistica.pinInputLineHeight,
                            fontSize: _pinfieldcssmistica.pinInputLineHeight,
                            height: _pinfieldcssmistica.pinInputLineHeight
                        },
                        disabled: g,
                        readOnly: y,
                        autoComplete: d ? "one-time-code" : void 0,
                        value: (_t_e = t[e]) !== null && _t_e !== void 0 ? _t_e : "",
                        onChange: H(e),
                        onKeyDown: (r)=>{
                            switch(r.key){
                                case "Backspace":
                                case "Delete":
                                    if (r.currentTarget.value && c(t.slice(0, e) + t.slice(e + 1)), e > 0 && e >= t.length - 1) {
                                        const o = a[e - 1];
                                        o == null || o.focus();
                                    }
                                    break;
                                case "ArrowLeft":
                                    if (e > 0) {
                                        const o = a[e - 1];
                                        o && o.focus();
                                    }
                                    break;
                                case "ArrowRight":
                                    if (e < l - 1) {
                                        const o = a[e + 1];
                                        o && o.focus();
                                    }
                                    break;
                            }
                        }
                    }),
                    f && t[e] && /* @__PURE__ */ (0, _jsxruntime.jsx)("div", {
                        "aria-hidden": !0,
                        className: _pinfieldcssmistica.passwordDot,
                        children: "•"
                    })
                ]
            }, e);
        })
    });
}, ee = (param)=>{
    let { length: l = 6, hideCode: f = !1, readSms: d = !f, disabled: g, readOnly: y, name: F, value: b, defaultValue: u, helperText: A, error: C, onChangeValue: R, onChange: S, "aria-label": w, "aria-labelledby": I, dataAttributes: a } = param;
    const i = (0, _formcontext.useFieldProps)({
        name: F,
        value: b,
        defaultValue: u,
        processValue: (c)=>c,
        helperText: A,
        optional: !1,
        error: C,
        disabled: g,
        onChangeValue: R,
        onChange: S
    }), t = (0, _hooks.useAriaId)();
    return /* @__PURE__ */ (0, _jsxruntime.jsxs)("div", _object_spread_props(_object_spread({
        role: "group",
        "aria-labelledby": I !== null && I !== void 0 ? I : t,
        className: (0, _classnames.default)(_pinfieldcssmistica.fieldContainer, {
            [_pinfieldcssmistica.disabled]: g
        })
    }, (0, _dom.getPrefixedDataAttributes)(a, "PinField")), {
        children: [
            w && !I && /* @__PURE__ */ (0, _jsxruntime.jsx)(_screenreaderonly.default, {
                children: /* @__PURE__ */ (0, _jsxruntime.jsx)("div", {
                    id: t,
                    children: w
                })
            }),
            /* @__PURE__ */ (0, _jsxruntime.jsx)(x, {
                inputRef: i.inputRef,
                length: l,
                hideCode: f,
                readSms: d,
                value: i.value,
                defaultValue: i.defaultValue,
                disabled: i.disabled,
                onChange: i.onChange,
                readOnly: y
            }),
            /* @__PURE__ */ (0, _jsxruntime.jsx)(_textfieldcomponents.HelperText, {
                error: i.error,
                leftText: i.helperText
            })
        ]
    }));
}, de = ee;
