"use client";
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
import { jsxs as R, jsx as o } from "react/jsx-runtime";
import * as s from "react";
import { Content as S } from "./list.js";
import T from "./icons/icon-chevron.js";
import A from "./box.js";
import { itemContent as w, touchableBackgroundInverse as O, touchableBackground as y, chevronContainer as D, panelTransitionClasses as P, panelContainer as V, panel as k } from "./accordion.css-mistica.js";
import E from "./stack.js";
import { BaseTouchable as _ } from "./touchable.js";
import L from "classnames";
import { vars as h } from "./skins/skin-contract.css-mistica.js";
import { getPrefixedDataAttributes as B } from "./utils/dom.js";
import X from "./divider.js";
import { Boxed as j } from "./boxed.js";
import { useIsInverseVariant as M } from "./theme-variant-context.js";
import { useAriaId as v } from "./hooks.js";
import { CSSTransition as q } from "react-transition-group";
import { isRunningAcceptanceTest as z } from "./utils/platform.js";
import { sprinkles as F } from "./sprinkles.css-mistica.js";
const C = 400, g = /*#__PURE__*/ s.createContext({
    index: [],
    toggle: ()=>{}
}), H = ()=>s.useContext(g), b = (param)=>{
    let { value: t, defaultValue: r, onChange: n, singleOpen: i } = param;
    const u = t !== void 0, d = (e)=>e === void 0 ? [] : typeof e == "number" ? [
            e
        ] : e, [c, a] = s.useState(d(r));
    s.useEffect(()=>{
        if (c.length > 1 && i) {
            const e = [
                ...c
            ];
            e.splice(1), a(e);
        }
    }, [
        i,
        c
    ]);
    const p = (e, l)=>{
        if (!l) return [
            e
        ];
        const m = l.indexOf(e);
        let I = [
            ...l
        ];
        return m === -1 ? i ? I = [
            e
        ] : I.push(e) : I.splice(m, 1), I;
    }, f = (e)=>{
        if (u || a(p(e, c)), n) {
            const l = (u ? d(t) : c).includes(e);
            n(e, !l);
        }
    };
    return u ? [
        d(t),
        f
    ] : [
        c,
        f
    ];
}, U = (t)=>{
    const r = t == null ? void 0 : t.closest("[data-accordion]");
    if (r) return Array.from(r.querySelectorAll("[data-accordion-item]")).filter((n)=>n.closest("[data-accordion]") === r).findIndex((n)=>n === t);
}, N = /*#__PURE__*/ s.forwardRef((_param, u)=>{
    var { content: t, dataAttributes: r, trackingEvent: n } = _param, i = _object_without_properties(_param, [
        "content",
        "dataAttributes",
        "trackingEvent"
    ]);
    const d = s.useRef(null), c = s.useRef(null), { index: a, toggle: p } = H(), f = M(), e = v(), l = v(), [m, I] = s.useState(), x = m !== void 0 && (a == null ? void 0 : a.includes(m));
    return s.useEffect(()=>{
        I(U(c.current));
    }, []), /* @__PURE__ */ R("div", _object_spread_props(_object_spread({
        ref: c
    }, B(_object_spread_props(_object_spread({}, r), {
        "accordion-item": !0
    }))), {
        children: [
            /* @__PURE__ */ o(_, {
                ref: u,
                className: L(w, f ? O : y),
                onPress: ()=>{
                    m !== void 0 && p(m);
                },
                trackingEvent: n,
                "aria-expanded": x,
                "aria-controls": l,
                children: /* @__PURE__ */ o(A, {
                    paddingX: 16,
                    children: /* @__PURE__ */ o(S, _object_spread_props(_object_spread({
                        labelId: e
                    }, i), {
                        right: /* @__PURE__ */ o("div", {
                            className: D,
                            children: /* @__PURE__ */ o(T, {
                                size: 24,
                                transitionDuration: C,
                                direction: x ? "up" : "down",
                                color: f ? h.colors.inverse : x ? h.colors.neutralHigh : h.colors.neutralMedium
                            })
                        })
                    }))
                })
            }),
            /* @__PURE__ */ o(q, {
                in: x,
                timeout: z() ? 0 : C,
                nodeRef: d,
                classNames: P,
                mountOnEnter: !0,
                unmountOnExit: !0,
                children: /* @__PURE__ */ o("div", {
                    className: V,
                    ref: d,
                    children: /* @__PURE__ */ o("div", {
                        className: k,
                        role: "region",
                        "aria-labelledby": e,
                        id: l,
                        children: /* @__PURE__ */ o(A, {
                            paddingX: 16,
                            paddingBottom: 16,
                            children: t
                        })
                    })
                })
            })
        ]
    }));
}), ae = /*#__PURE__*/ s.forwardRef((_param, i)=>{
    var { dataAttributes: t, role: r } = _param, n = _object_without_properties(_param, [
        "dataAttributes",
        "role"
    ]);
    return /* @__PURE__ */ o("div", {
        role: r,
        className: F({
            width: "100%"
        }),
        children: /* @__PURE__ */ o(N, _object_spread_props(_object_spread({}, n), {
            ref: i,
            dataAttributes: _object_spread({
                "component-name": "AccordionItem"
            }, t)
        }))
    });
}), le = (param)=>{
    let { children: t, dataAttributes: r, index: n, defaultIndex: i, onChange: u, singleOpen: d, role: c } = param;
    const [a, p] = b({
        value: n,
        defaultValue: i,
        onChange: u,
        singleOpen: d
    }), f = s.Children.toArray(t).filter(Boolean), e = f.length - 1;
    return /* @__PURE__ */ o(g.Provider, {
        value: {
            index: a,
            toggle: p
        },
        children: /* @__PURE__ */ o("div", _object_spread_props(_object_spread({
            role: c
        }, B(_object_spread_props(_object_spread({}, r), {
            accordion: !0
        }), "Accordion")), {
            children: f.map((l, m)=>/* @__PURE__ */ R(s.Fragment, {
                    children: [
                        l,
                        m < e && /* @__PURE__ */ o(A, {
                            paddingX: 16,
                            children: /* @__PURE__ */ o(X, {})
                        })
                    ]
                }, m))
        }))
    });
}, me = /*#__PURE__*/ s.forwardRef((_param, i)=>{
    var { dataAttributes: t, isInverse: r } = _param, n = _object_without_properties(_param, [
        "dataAttributes",
        "isInverse"
    ]);
    return /* @__PURE__ */ o(j, {
        isInverse: r,
        ref: i,
        dataAttributes: _object_spread({
            "component-name": "BoxedAccordionItem"
        }, t),
        children: /* @__PURE__ */ o(N, _object_spread({}, n))
    });
}), ue = (param)=>{
    let { children: t, dataAttributes: r, index: n, defaultIndex: i, onChange: u, singleOpen: d, role: c } = param;
    const [a, p] = b({
        value: n,
        defaultValue: i,
        onChange: u,
        singleOpen: d
    });
    return /* @__PURE__ */ o(g.Provider, {
        value: {
            index: a,
            toggle: p
        },
        children: /* @__PURE__ */ o(E, {
            space: 16,
            role: c,
            dataAttributes: _object_spread({
                "component-name": "BoxedAccordion",
                accordion: !0
            }, r),
            children: t
        })
    });
};
export { le as Accordion, ae as AccordionItem, ue as BoxedAccordion, me as BoxedAccordionItem };
