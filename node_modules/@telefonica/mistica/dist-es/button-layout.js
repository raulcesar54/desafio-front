"use client";
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
import { jsx as a, jsxs as n, Fragment as o } from "react/jsx-runtime";
import * as y from "react";
import { ButtonPrimary as L, ButtonDanger as N, ButtonSecondary as v } from "./button.js";
import g from "classnames";
import { getPrefixedDataAttributes as w } from "./utils/dom.js";
import { linkInNewLine as O, link as j, container as A, alignVariant as C, containerWithTwoButtons as D, margins as P } from "./button-layout.css-mistica.js";
const p = [
    L,
    N,
    v
], R = (param)=>{
    let { children: r, primaryButton: e, secondaryButton: s, align: t = "full-width", link: c, withMargins: x = !1, dataAttributes: B } = param;
    const l = y.Children.toArray(r).sort((b, k)=>{
        const f = p.indexOf(b.type), h = p.indexOf(k.type);
        return t === "right" ? h - f : f - h;
    }), i = r ? l.length : (e ? 1 : 0) + (s ? 1 : 0), m = r ? l : t === "right" ? /* @__PURE__ */ n(o, {
        children: [
            s,
            e
        ]
    }) : /* @__PURE__ */ n(o, {
        children: [
            e,
            s
        ]
    }), u = c ? /* @__PURE__ */ a("div", {
        className: g(i !== 1 ? O : j),
        "data-link": "true",
        children: c
    }) : null, d = /* @__PURE__ */ a("div", _object_spread_props(_object_spread({
        className: g(A, C[t], {
            [D]: i > 1
        })
    }, w(B, "ButtonLayout")), {
        children: t !== "right" || i > 1 ? /* @__PURE__ */ n(o, {
            children: [
                m,
                u
            ]
        }) : /* @__PURE__ */ n(o, {
            children: [
                u,
                m
            ]
        })
    }));
    return x ? /* @__PURE__ */ a("div", {
        className: P,
        children: d
    }) : d;
}, W = R;
export { W as default };
