"use client";
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
import { jsxs as d, jsx as f } from "react/jsx-runtime";
import * as e from "react";
import { isWebViewBridgeAvailable as C } from "@tef-novum/webview-bridge";
const k = /*#__PURE__*/ e.createContext({
    snackbars: [],
    setSnackbars: ()=>{}
}), p = /*#__PURE__*/ e.lazy(()=>import(/* webpackChunkName: "snackbar" */ "./snackbar.js")), R = (param)=>{
    let { children: l } = param;
    const [s, n] = e.useState([]), o = e.useRef(null), a = e.useRef(!1), r = C();
    e.useEffect(()=>{
        var c;
        s.length > 1 && !a.current && (a.current = !0, r ? n((i)=>i.slice(1)) : (c = o.current) == null || c.close({
            action: "CONSECUTIVE"
        }));
    }, [
        s,
        r
    ]);
    const S = (param)=>{
        let { action: c } = param;
        var i, b;
        a.current = !1, n(r && c === "CONSECUTIVE" ? (u)=>u.slice(0) : (u)=>u.slice(1)), (b = (i = s[0]).onClose) == null || b.call(i, {
            action: c
        });
    }, m = e.useMemo(()=>({
            snackbars: s,
            setSnackbars: n
        }), [
        s
    ]), t = s[0];
    return /* @__PURE__ */ d(k.Provider, {
        value: m,
        children: [
            l,
            !!t && /* @__PURE__ */ f(e.Suspense, {
                fallback: null,
                children: /* @__PURE__ */ f(p, {
                    ref: o,
                    message: t.message,
                    buttonText: t.buttonText,
                    buttonAccessibilityLabel: t.buttonAccessibilityLabel,
                    duration: t.duration,
                    type: t.type,
                    withDismiss: t.withDismiss,
                    onClose: S
                }, t.id)
            })
        ]
    });
}, g = ()=>{
    const { snackbars: l, setSnackbars: s } = e.useContext(k);
    return {
        openSnackbar: e.useCallback((o)=>{
            const a = Date.now() + "-" + Math.random();
            s((r)=>[
                    ...r,
                    _object_spread_props(_object_spread({}, o), {
                        id: a
                    })
                ]);
        }, [
            s
        ]),
        snackbars: l
    };
};
export { R as SnackbarRoot, g as useSnackbar };
