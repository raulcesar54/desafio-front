"use client";
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
import { jsxs as d, Fragment as C, jsx as t } from "react/jsx-runtime";
import m from "classnames";
import { useTheme as P } from "./hooks.js";
import x from "./badge.js";
import o from "./box.js";
import { Text2 as V } from "./text.js";
import z from "./generated/mistica-icons/icon-close-regular.js";
import { pxToRem as i } from "./utils/css.js";
import { iconActive as D, icon as L, chipVariants as h, chipWrapper as p, button as M, wrappedContent as F, chipInteractiveVariants as W } from "./chip.css-mistica.js";
import { vars as $ } from "./skins/skin-contract.css-mistica.js";
import { useThemeVariant as q } from "./theme-variant-context.js";
import E, { BaseTouchable as G } from "./touchable.js";
const H = (e)=>{
    const { Icon: n, children: A, id: R, dataAttributes: T, active: a, badge: r, onClose: s } = e, { texts: k, isDarkMode: I, textPresets: B } = P(), u = q() === "alternative", f = n ? {
        mobile: 16,
        desktop: 8
    } : {
        mobile: 20,
        desktop: 12
    }, w = {
        mobile: 20,
        desktop: 12
    }, g = {
        mobile: 16,
        desktop: 8
    }, b = /* @__PURE__ */ d(C, {
        children: [
            n && /* @__PURE__ */ t(o, {
                paddingRight: 4,
                className: a ? D : L,
                children: /* @__PURE__ */ t(n, {
                    color: "currentColor",
                    size: i(16)
                })
            }),
            /* @__PURE__ */ t(o, {
                paddingRight: r ? 8 : s ? 4 : 0,
                children: /* @__PURE__ */ t(V, {
                    id: R,
                    weight: B.indicator.weight,
                    truncate: 1,
                    color: "currentColor",
                    children: A
                })
            })
        ]
    }), c = _object_spread({
        "component-name": "Chip"
    }, T);
    if (s) return /* @__PURE__ */ d(o, {
        className: m(u ? h.overAlternative : h.default, p),
        paddingLeft: f,
        paddingRight: g,
        dataAttributes: c,
        children: [
            b,
            /* @__PURE__ */ t(E, {
                style: {
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                    width: i(24),
                    height: i(24)
                },
                "aria-label": k.closeButtonLabel,
                onPress: ()=>s(),
                children: /* @__PURE__ */ t(z, {
                    size: i(16),
                    color: $.colors.neutralMedium
                })
            })
        ]
    });
    const l = e.href || e.onPress || e.to, y = a !== void 0 || l, N = ()=>r ? /* @__PURE__ */ t(C, {
            children: r === !0 ? /* @__PURE__ */ t(x, {}) : /* @__PURE__ */ t(x, {
                value: r
            })
        }) : null, v = (j)=>/* @__PURE__ */ d(o, {
            className: m(h[a ? "active" : u ? "overAlternative" : "default"], // If the chip is wrapped inside a BaseTouchable, we set inline-flex to the Touchable instead
            l ? F : p, {
                [W[I ? "dark" : "light"]]: y
            }),
            paddingLeft: f,
            paddingRight: r ? g : w,
            dataAttributes: j,
            children: [
                b,
                N()
            ]
        });
    return l ? /* @__PURE__ */ t(G, _object_spread_props(_object_spread({}, e), {
        className: m(p, M),
        dataAttributes: c,
        children: v()
    })) : v(c);
}, rt = H;
export { rt as default };
