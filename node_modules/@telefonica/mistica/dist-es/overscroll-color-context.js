"use client";
import { jsx as s, Fragment as m, jsxs as p } from "react/jsx-runtime";
import * as a from "react";
import { useThemeVariant as C } from "./theme-variant-context.js";
import { useTheme as c } from "./hooks.js";
import { createNestableContext as v } from "./nestable-context.js";
import { getPlatform as h } from "./utils/platform.js";
import { vars as l } from "./skins/skin-contract.css-mistica.js";
import { isCssVar as g, getCssVarValue as k } from "./utils/dom.js";
const { Provider: b, useSetValue: d, useValue: u } = v({}), M = u, i = (o)=>h(o) === "ios", O = ()=>{
    const { topColor: o } = u(), { isDarkMode: e } = c();
    return a.useEffect(()=>{
        if (!o) return;
        const t = document.head.querySelectorAll("meta[name=theme-color]");
        t.forEach((n)=>{
            n.remove();
        });
        const r = document.createElement("meta");
        return r.name = "theme-color", r.media = e ? "(prefers-color-scheme: dark)" : "(prefers-color-scheme: light)", r.content = g(o) ? k(o) : o, document.head.appendChild(r), ()=>{
            r.remove(), t.forEach((n)=>{
                document.head.appendChild(n);
            });
        };
    }, [
        e,
        o
    ]), null;
}, y = ()=>{
    const [o, e] = a.useState("transparent");
    return a.useEffect(()=>{
        const t = window.matchMedia("(prefers-color-scheme: dark)");
        let r;
        const n = ()=>{
            r = requestAnimationFrame(()=>{
                const f = getComputedStyle(document.body).backgroundColor;
                e(f);
            });
        };
        return t.addListener(n), n(), ()=>{
            t.removeListener(n), cancelAnimationFrame(r);
        };
    }, []), o;
}, B = ()=>{
    const { topColor: o, bottomColor: e } = u(), t = y();
    if (!e && !o) return null;
    const r = e !== null && e !== void 0 ? e : t;
    return r === o || r === "transparent" ? null : /* @__PURE__ */ s("div", {
        style: {
            position: "fixed",
            zIndex: -1,
            background: r,
            width: "100%",
            height: 300,
            left: 0,
            right: 0,
            bottom: 0
        }
    });
}, P = (param)=>{
    let { children: o } = param;
    const { platformOverrides: e } = c();
    return i(e) ? /* @__PURE__ */ p(b, {
        children: [
            /* @__PURE__ */ s(O, {}),
            o,
            /* @__PURE__ */ s(B, {})
        ]
    }) : /* @__PURE__ */ s(m, {
        children: o
    });
}, x = (o)=>{
    switch(o){
        case "default":
            return l.colors.background;
        case "alternative":
            return l.colors.backgroundAlternative;
        case "inverse":
            return l.colors.backgroundBrand;
        default:
            const e = o;
            throw new Error(`Invalid variant: ${e}`);
    }
}, w = ()=>{
    const o = C();
    return d({
        topColor: x(o)
    }), null;
}, E = ()=>i(c().platformOverrides) ? /* @__PURE__ */ s(w, {}) : /* @__PURE__ */ s(m, {}), j = (o)=>{
    d(o);
}, L = E;
export { P as OverscrollColorProvider, L as default, M as useOverScrollColor, j as useSetOverscrollColor };
