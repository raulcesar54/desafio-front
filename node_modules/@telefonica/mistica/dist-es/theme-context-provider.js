"use client";
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
import { jsxs as P, Fragment as M, jsx as r } from "react/jsx-runtime";
import * as o from "react";
import { assignInlineVars as h } from "@vanilla-extract/dynamic";
import { DialogRoot as D } from "./dialog-context.js";
import $ from "./screen-size-context-provider.js";
import N from "./aria-id-getter-context.js";
import { getTexts as j, dimensions as y, getMisticaLinkComponent as A, NAVBAR_HEIGHT_MOBILE as z } from "./theme.js";
import { getPlatform as _, isInsideNovumNativeApp as F } from "./utils/platform.js";
import L from "./theme-context.js";
import { useIsomorphicLayoutEffect as I } from "./hooks.js";
import B from "./tab-focus.js";
import G from "./modal-context-provider.js";
import W from "./tooltip-context-provider.js";
import { DocumentVisibilityProvider as q } from "./utils/document-visibility.js";
import { AspectRatioSupportProvider as K } from "./utils/aspect-ratio-support.js";
import { TrackingConfig as J } from "./utils/analytics.js";
import { vars as E } from "./skins/skin-contract.css-mistica.js";
import { fromHexToRgb as Q } from "./utils/color.js";
import { defaultTextPresetsConfig as U, defaultBorderRadiiConfig as X } from "./skins/defaults.js";
import { isClientSide as O } from "./utils/environment.js";
import { PACKAGE_VERSION as w } from "./package-version.js";
import { SnackbarRoot as Y } from "./snackbar-context.js";
import { mapToWeight as S } from "./text.js";
import { tabletOrSmaller as Z } from "./media-queries.css-mistica.js";
import { themeVarsContract as ee, textPresetResponsiveVarsContract as te, themeVars as re } from "./theme-context.css-mistica.js";
if (process.env.NODE_ENV !== "production" && O()) {
    if (window.__mistica_version__ && window.__mistica_version__ !== w) throw new Error("There is more than one version of @telefonica/mistica running on the same page");
    window.__mistica_version__ = w;
}
const oe = "(prefers-color-scheme: dark)", se = ()=>{
    const [e, l] = o.useState(!1);
    return I(()=>{
        if (!window.matchMedia) return;
        const i = window.matchMedia(oe), s = ()=>{
            l(i.matches);
        };
        return i.addEventListener("change", s), s(), ()=>{
            i.removeEventListener("change", s);
        };
    }, []), e;
}, ie = ()=>(e)=>e, ne = (e)=>({
        headerMobileHeight: (e == null ? void 0 : e.headerMobileHeight) === "mistica" ? z : e == null ? void 0 : e.headerMobileHeight
    }), ae = ()=>{
    const e = o.useRef(null), [l, i] = o.useState(!1), [s, v] = o.useState(!0);
    return I(()=>{
        var d;
        if (s) v(!1);
        else {
            const p = (d = e.current) == null ? void 0 : d.parentElement;
            p && (p.style.isolation = "isolate", i(!0));
        }
    }, [
        s
    ]), l || !O() || s ? null : /* @__PURE__ */ r("div", {
        ref: e,
        style: {
            display: "none"
        }
    });
}, le = (param)=>{
    let { theme: e, children: l, as: i, withoutStyles: s = !1 } = param;
    var _e_colorScheme, _e_skin_borderRadii;
    const v = o.useRef(1), d = o.useCallback(()=>`aria-id-hook-${v.current++}`, []), p = se(), k = (_e_colorScheme = e.colorScheme) !== null && _e_colorScheme !== void 0 ? _e_colorScheme : "auto", R = e.skin.colors, T = _object_spread({}, e.skin.colors, e.skin.darkModeColors), x = k === "auto" && p || k === "dark", m = x ? T : R, c = o.useMemo(()=>{
        const n = _object_spread({
            platform: _(),
            insideNovumNativeApp: F()
        }, e.platformOverrides), a = Object.entries(U).map((param)=>{
            let [u, g] = param;
            var f;
            return {
                [u]: _object_spread({}, g, (f = e.skin.textPresets) == null ? void 0 : f[u])
            };
        }), t = Object.assign({}, ...a);
        var _e_useHrefDecorator;
        return {
            skinName: e.skin.name,
            i18n: e.i18n,
            platformOverrides: n,
            texts: _object_spread({}, j(e.i18n.locale), e.texts),
            analytics: _object_spread({
                logEvent: ()=>Promise.resolve(),
                eventFormat: "universal-analytics"
            }, e.analytics),
            colorValues: m,
            dimensions: _object_spread({}, y, ne(e.dimensions)),
            textPresets: t,
            Link: A(e.Link),
            isDarkMode: x,
            isIos: _(n) === "ios",
            useHrefDecorator: (_e_useHrefDecorator = e.useHrefDecorator) !== null && _e_useHrefDecorator !== void 0 ? _e_useHrefDecorator : ie,
            useId: e.useId
        };
    }, [
        m,
        e,
        x
    ]), H = o.useMemo(()=>Object.fromEntries(Object.entries(m).map((param)=>{
            let [n, a] = param;
            let t = "";
            if (a.startsWith("#")) {
                const [u, g, f] = Q(a);
                t = `${u}, ${g}, ${f}`;
            }
            return [
                n,
                t
            ];
        })), [
        m
    ]), V = o.useMemo(()=>{
        const n = Object.entries(c.textPresets).map((param)=>{
            let [a, t] = param;
            return {
                [a]: _object_spread({}, t.weight && {
                    weight: String(S[t.weight])
                }, t.size && {
                    size: `${t.size.desktop}px`
                }, t.lineHeight && {
                    lineHeight: `${t.lineHeight.desktop}px`
                })
            };
        });
        return Object.assign({}, ...n);
    }, [
        c
    ]), b = o.useMemo(()=>{
        const n = Object.entries(c.textPresets).map((param)=>{
            let [a, t] = param;
            return {
                [a]: _object_spread({}, t.weight && {
                    weight: String(S[t.weight])
                }, t.size && {
                    size: `${t.size.mobile}px`
                }, t.lineHeight && {
                    lineHeight: `${t.lineHeight.mobile}px`
                })
            };
        });
        return Object.assign({}, ...n);
    }, [
        c
    ]), C = {
        textPresets: V,
        colors: m,
        rawColors: H,
        borderRadii: (_e_skin_borderRadii = e.skin.borderRadii) !== null && _e_skin_borderRadii !== void 0 ? _e_skin_borderRadii : X
    };
    return /* @__PURE__ */ P(M, {
        children: [
            /* @__PURE__ */ r(B, {
                disabled: !e.enableTabFocus,
                children: /* @__PURE__ */ r(G, {
                    children: /* @__PURE__ */ r(W, {
                        children: /* @__PURE__ */ r(L.Provider, {
                            value: c,
                            children: /* @__PURE__ */ r(J, {
                                eventFormat: c.analytics.eventFormat,
                                children: /* @__PURE__ */ r(K, {
                                    children: /* @__PURE__ */ r(q, {
                                        children: /* @__PURE__ */ r(N.Provider, {
                                            value: d,
                                            children: /* @__PURE__ */ r($, {
                                                children: /* @__PURE__ */ r(D, {
                                                    children: /* @__PURE__ */ r(Y, {
                                                        children: i ? /*#__PURE__*/ o.createElement(i, {
                                                            style: _object_spread({
                                                                isolation: "isolate"
                                                            }, h(ee, C), h(te, b)),
                                                            className: s ? void 0 : re
                                                        }, l) : /* @__PURE__ */ P(M, {
                                                            children: [
                                                                !s && (process.env.NODE_ENV !== "test" || process.env.SSR_TEST) && /* @__PURE__ */ r("style", {
                                                                    children: `
                                                                                :root {${h(E, C)}}
                                                                                @media ${Z} {
                                                                                    :root {${h(E.textPresets, b)}}
                                                                                }
                                                                            `
                                                                }),
                                                                l
                                                            ]
                                                        })
                                                    })
                                                })
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            }),
            !i && /* @__PURE__ */ r(ae, {})
        ]
    });
}, Ve = le;
export { Ve as default, se as useIsOsDarkModeEnabled };
