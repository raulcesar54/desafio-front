"use client";
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
import { jsx as u } from "react/jsx-runtime";
import * as S from "react";
import { ActionsSheet as w, RadioListSheet as y, ActionsListSheet as N, InfoSheet as A } from "./sheet.js";
import O from "./image.js";
import { useTheme as m } from "./hooks.js";
let p = null, n = null, l = null;
const d = (r)=>Array.isArray(r) ? r.length ? r.join(`

`) : void 0 : r, L = (param)=>{
    let { title: r, subtitle: c, description: e, selectedId: s, items: t } = param;
    return l({
        title: r,
        subtitle: c,
        // TODO: add multiline support to native sheet
        description: d(e),
        content: [
            {
                type: "LIST",
                id: "list-0",
                listType: "SINGLE_SELECTION",
                autoSubmit: !0,
                selectedIds: typeof s == "string" ? [
                    s
                ] : [],
                items: t
            }
        ]
    }).then((param)=>{
        let { action: o, result: a } = param;
        return o === "SUBMIT" ? {
            action: o,
            selectedId: a[0].selectedIds[0]
        } : {
            action: o,
            selectedId: null
        };
    });
}, k = (param)=>{
    let { title: r, subtitle: c, description: e, items: s } = param;
    return l({
        title: r,
        subtitle: c,
        // TODO: add multiline support to native sheet
        description: d(e),
        content: [
            {
                type: "LIST",
                id: "list-0",
                listType: "ACTIONS",
                autoSubmit: !0,
                selectedIds: [],
                items: s
            }
        ]
    }).then((param)=>{
        let { action: t, result: o } = param;
        return t === "SUBMIT" ? {
            action: t,
            selectedId: o[0].selectedIds[0]
        } : {
            action: t,
            selectedId: null
        };
    });
}, b = function() {
    var _ref = _async_to_generator(function*(param) {
        let { title: r, subtitle: c, description: e, items: s } = param;
        yield l({
            title: r,
            subtitle: c,
            // TODO: add multiline support to native sheet
            description: d(e),
            content: [
                {
                    type: "LIST",
                    id: "list-0",
                    listType: "INFORMATIVE",
                    autoSubmit: !1,
                    selectedIds: [],
                    items: s
                }
            ]
        });
    });
    return function b(_) {
        return _ref.apply(this, arguments);
    };
}(), C = function() {
    var _ref = _async_to_generator(function*(param) {
        let { title: r, subtitle: c, description: e, button: s, secondaryButton: t, link: o } = param;
        return l({
            title: r,
            subtitle: c,
            // TODO: add multiline support to native sheet
            description: d(e),
            content: [
                {
                    type: "BOTTOM_ACTIONS",
                    id: "bottom-actions-0",
                    button: s,
                    secondaryButton: t,
                    link: o
                }
            ]
        }).then((param)=>{
            let { action: a, result: i } = param;
            if (a === "SUBMIT") {
                const f = i.find((param)=>{
                    let { id: T } = param;
                    return T === "bottom-actions-0";
                }), I = f == null ? void 0 : f.selectedIds[0];
                if (I === "PRIMARY" || I === "SECONDARY" || I === "LINK") return {
                    action: I
                };
            }
            return {
                action: "DISMISS"
            };
        });
    });
    return function C(_) {
        return _ref.apply(this, arguments);
    };
}();
let h = !1;
const B = (r)=>{
    const c = ()=>{
        if (!p) return Promise.reject(new Error("Tried to show a Sheet but the SheetRoot component was not mounted"));
        if (h) return Promise.reject(new Error("Tried to show a Sheet but there is already one open"));
        h = !0, p(r);
        const e = new Promise((s)=>{
            n = s;
        });
        return e.finally(()=>{
            h = !1;
        }), e;
    };
    if (l) {
        let e;
        const { type: s, props: t } = r;
        switch(s){
            case "INFO":
                e = b(t);
                break;
            case "ACTIONS_LIST":
                e = k(t);
                break;
            case "RADIO_LIST":
                e = L(t);
                break;
            case "ACTIONS":
                e = C(t);
                break;
            default:
                const o = s;
                throw new Error(`Unknown sheet type: ${o}`);
        }
        return e.catch((o)=>{
            if (o.code === "400") return c();
            throw o;
        });
    } else return c();
}, M = (r)=>{
    const { isDarkMode: c } = m(), [e, s] = S.useState(null), t = S.useRef(null);
    if (S.useEffect(()=>{
        if (r.nativeImplementation) return l = r.nativeImplementation, ()=>{
            l = null;
        };
    }, [
        r.nativeImplementation
    ]), S.useEffect(()=>(p = (i)=>{
            t.current = null, s(i);
        }, ()=>{
            p = null;
        }), []), !e) return null;
    const o = ()=>{
        switch(s(null), e.type){
            case "INFO":
                n == null || n(void 0);
                break;
            case "ACTIONS_LIST":
                t.current ? n == null || n({
                    action: "SUBMIT",
                    selectedId: t.current
                }) : n == null || n({
                    action: "DISMISS"
                });
                break;
            case "RADIO_LIST":
                t.current ? n == null || n({
                    action: "SUBMIT",
                    selectedId: t.current
                }) : n == null || n({
                    action: "DISMISS"
                });
                break;
            case "ACTIONS":
                t.current === "PRIMARY" || t.current === "SECONDARY" || t.current === "LINK" ? n == null || n({
                    action: t.current
                }) : n == null || n({
                    action: "DISMISS"
                });
                break;
            default:
                throw new Error(`Unknown sheet type: ${e.type}`);
        }
    }, a = (i)=>{
        t.current = i;
    };
    switch(e.type){
        case "INFO":
            return /* @__PURE__ */ u(A, _object_spread_props(_object_spread({}, e.props), {
                onClose: o
            }));
        case "ACTIONS_LIST":
            return /* @__PURE__ */ u(N, _object_spread_props(_object_spread({}, e.props), {
                onClose: o,
                onSelect: a
            }));
        case "RADIO_LIST":
            return /* @__PURE__ */ u(y, _object_spread_props(_object_spread({}, e.props), {
                items: e.props.items.map((i)=>_object_spread_props(_object_spread({}, i), {
                        asset: i.icon && /* @__PURE__ */ u(O, {
                            circular: !0,
                            src: c && i.icon.urlDark ? i.icon.urlDark : i.icon.url,
                            width: i.icon.size === "small" ? 24 : 40
                        })
                    })),
                onClose: o,
                onSelect: a
            }));
        case "ACTIONS":
            return /* @__PURE__ */ u(w, _object_spread_props(_object_spread({}, e.props), {
                buttonLink: e.props.link,
                onClose: o,
                onPressButton: a
            }));
        default:
            throw new Error(`Unknown sheet type: ${e.type}`);
    }
}, F = M;
export { M as SheetRoot, F as default, B as showSheet };
