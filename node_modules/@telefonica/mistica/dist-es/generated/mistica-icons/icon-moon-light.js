"use client";
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
import { jsx as r } from "react/jsx-runtime";
import { useIsInverseVariant as c } from "../../theme-variant-context.js";
import { vars as t } from "../../skins/skin-contract.css-mistica.js";
const l = (_param)=>{
    var { color: n, size: o = 24 } = _param, e = _object_without_properties(_param, [
        "color",
        "size"
    ]);
    const s = c(), i = n !== null && n !== void 0 ? n : s ? t.colors.inverse : t.colors.neutralHigh;
    return /* @__PURE__ */ r("svg", _object_spread_props(_object_spread({
        width: o,
        height: o,
        viewBox: "0 0 24 24",
        role: "presentation"
    }, e), {
        children: /* @__PURE__ */ r("path", {
            fill: i,
            d: "M20.796 16.299a.42.42 0 0 1 .493.056c.135.12.177.316.098.479-2.1 4.532-7.028 4.963-8.49 4.988-.258.009-.577.009-.874.009-8.994-.151-9.448-8.244-9.448-9.863 0-8.992 7.18-9.779 9.38-9.807l.897.009q.904.022 1.796.187a.42.42 0 0 1 .344.406.42.42 0 0 1-.333.415c-2.342.499-5.132 2.11-5.132 6.941 0 6.55 5.23 7.143 6.832 7.168.224 0 .47 0 .673-.008.798-.02 2.336-.171 3.764-.98m-8.764 4.7c.28 0 .59 0 .845-.009 1.213-.022 5.003-.341 7.121-3.414a9.6 9.6 0 0 1-2.944.538c-.204.008-.462.008-.703.008-1.286-.02-7.667-.501-7.667-8.003 0-4.201 1.992-6.182 3.905-7.115L11.959 3c-2 .025-8.544.745-8.544 8.972 0 8.244 6.594 8.994 8.617 9.028"
        })
    }));
}, f = l;
export { f as default };
